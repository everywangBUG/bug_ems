"""
Django settings for luffyapi project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sl5-5(*#f857-pxg_da9$fpw4wt)0n+zo=4m3$-n#&pk0wxymo'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'luffyapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'luffyapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# logging configs
LOGGING = {
    "version": 1, # python team developement version is 1
    "disable_existing_loggers": False, # disable other logger config, not disabled other logging config
    # fomatters illustrate
    "formatters": {
        "verbose": { # 详细信息
            # levelname错误等级 asctime错误发生时间 modeule错误模块文件地址 lineno第几行 messgae错误信息
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": { # 简单显示
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    # 过滤方式
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    # 处理方式
    "handlers": {
        "console": {
            # 日志等级
            "level": "INFO",
            # 是否调用日志过滤器
            "filters": ["require_debug_true"],
            # 通过SteamHandle实现的日志功能
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "INFO",
            # 使用这个类写入文件
            "class": "logging.handlers.RotatingFileHandler",
            # 日志位置
            "filename": os.path.join(os.path.dirname(BASE_DIR), "logs/luffy.log"),
            # 日志文件的最大存储设置为300M
            "maxBytes": 300 * 1024 * 1024,
            # 日志文件的最大备份数量为10个
            "backupCount": 10,
            # 日志文件的格式
            "formatter": 'verbose'
        }
    },
    # 日志对象
    "loggers": {
        "django": {
            # 日志文件输出到终端和文件中
            "handlers": ["console", "file"],
            "propagate": True, # 是否让日志信息继续冒泡给其他的日志处理系统
        },
    },
}

REST_FRAMEWORK = {
    # 异常处理
    "EXCEPTION_HANDLER": "luffyapi.utils.exceptions.custom_exception_handler"
}